{
	"info": {
		"_postman_id": "e36429ca-a0b4-4730-b078-be3bea702dbe",
		"name": "Generic E-commerce",
		"description": "# ðŸš€ Get started here\n\nThis template guides you through CRUD operations (GET, POST, PUT, DELETE), variables, and tests.\n\n## ðŸ”– **How to use this template**\n\n#### **Step 1: Send requests**\n\nRESTful APIs allow you to perform CRUD operations using the POST, GET, PUT, and DELETE HTTP methods.\n\nThis collection contains each of these [request](https://learning.postman.com/docs/sending-requests/requests/) types. Open each request and click \"Send\" to see what happens.\n\n#### **Step 2: View responses**\n\nObserve the response tab for status code (200 OK), response time, and size.\n\n#### **Step 3: Send new Body data**\n\nUpdate or add new data in \"Body\" in the POST request. Typically, Body data is also used in PUT request.\n\n```\n{\n    \"name\": \"Add your name in the body\"\n}\n\n ```\n\n#### **Step 4: Update the variable**\n\nVariables enable you to store and reuse values in Postman. We have created a [variable](https://learning.postman.com/docs/sending-requests/variables/) called `base_url` with the sample request [https://postman-api-learner.glitch.me](https://postman-api-learner.glitch.me). Replace it with your API endpoint to customize this collection.\n\n#### **Step 5: Add tests in the \"Scripts\" tab**\n\nAdding tests to your requests can help you confirm that your API is working as expected. You can write test scripts in JavaScript and view the output in the \"Test Results\" tab.\n\n<img src=\"https://content.pstmn.io/fa30ea0a-373d-4545-a668-e7b283cca343/aW1hZ2UucG5n\" alt=\"\" height=\"1530\" width=\"2162\">\n\n## ðŸ’ª Pro tips\n\n- Use folders to group related requests and organize the collection.\n    \n- Add more [scripts](https://learning.postman.com/docs/writing-scripts/intro-to-scripts/) to verify if the API works as expected and execute workflows.\n    \n\n## ðŸ’¡Related templates\n\n[API testing basics](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9a37a28-055b-49cd-8c7e-97494a21eb54&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[API documentation](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=e9c28f47-1253-44af-a2f3-20dce4da1f18&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)  \n[Authorization methods](https://go.postman.co/redirect/workspace?type=personal&collectionTemplateId=31a9a6ed-4cdf-4ced-984c-d12c9aec1c27&sourceTemplateId=ddb19591-3097-41cf-82af-c84273e56719)",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "19687815"
	},
	"item": [
		{
			"name": "01-Roles",
			"item": [
				{
					"name": "All Roles",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestId); // ce93a920-e3ee-4c29-b1a3-df511fbc7b3d"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Role By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestId); // b9332f6f-2699-46bc-b9b5-73044271f783\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Role Admin",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const response = pm.response.json();",
									"const expectedResult = pm.collectionVariables.get(\"roleAdmin\");",
									"",
									"pm.test(\"Response Body Structure is valid\", () => {",
									"    pm.expect(response.name).to.eql(expectedResult.name);",
									"    pm.expect(response.description).to.eql(expectedResult.description);",
									"    pm.expect(response.id).to.be.greaterThan(0);",
									"});",
									"",
									"pm.collectionVariables.set(\"roleAdminId\", response.id);",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestId); // 54da87db-ced3-447f-85b2-51aab3f4f632"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"admin\",\n    \"description\": \"Encargado de gestionar toda la plataforma\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Role Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"",
									"const response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"roleCustomerId\", response.id );"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// console.log(pm.info.requestId); f9e935af-f8d0-4c1d-9874-07df853d54ba\r",
									"// const runAfterRequestRoleAdmin = pm.execution.setNextRequest(\"54da87db-ced3-447f-85b2-51aab3f4f632\");"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"customer\",\n    \"description\": \"Usuarios que compran productos en la tienda en lÃ­nea\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Role WareHouse Manager",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"pm.collectionVariables.set(\"roleWareHouseManagerId\", response.id );"
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"// console.log(pm.info.requestId); // e38a0c88-c82f-48df-977e-39e56b267201"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"warehouse_manager\",\n    \"description\": \"Supervisa el stock y logÃ­stica de envÃ­os\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestId); // 0bb81a7b-1016-47ed-a0f6-8dd57b964837"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"warehouse_manager\",\n    \"description\": \"Supervisa el stock y logÃ­stica de envÃ­os de la e-commerce\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles/{{roleWareHouseManagerId}}",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{roleWareHouseManagerId}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Role",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"console.log(pm.info.requestId); // 180d8311-c1ae-4b68-8571-cab66b711d38"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/roles/{{roleWareHouseManagerId}}",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"roles",
								"{{roleWareHouseManagerId}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "02-Customers",
			"item": [
				{
					"name": "Customer By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Customer NotFound By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(404);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers/2",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"2"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "All Active Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers?page=0&size=10",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							],
							"query": [
								{
									"key": "page",
									"value": "0"
								},
								{
									"key": "size",
									"value": "10"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "All Inactive Customers",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers?active=false",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							],
							"query": [
								{
									"key": "active",
									"value": "false"
								}
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"",
									"pm.test(\"Response Body Structure is valid\", () => {",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.firstName).to.eql( pm.variables.get(\"firstName\") );",
									"    pm.expect(response.lastName).to.eql( pm.variables.get(\"lastName\") );",
									"    pm.expect(response.password.length).to.greaterThan(1);",
									"",
									"});",
									"",
									"pm.collectionVariables.set( \"customerId\", response.id );",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"\r",
									"let requestNumberForNewCustomers = pm.collectionVariables.get(\"requestNumberForNewCustomers\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"firstName\", pm.variables.replaceIn('{{$randomFirstName}}') );\r",
									"pm.variables.set(\"lastName\", pm.variables.replaceIn('{{$randomLastName}}')  );\r",
									"pm.variables.set(\"email\", pm.variables.replaceIn('{{$randomEmail}}')  );\r",
									"pm.variables.set(\"password\", pm.variables.replaceIn('{{$randomPassword}}') );\r",
									"\r",
									"console.log(\"firstName Value: \", pm.variables.get(\"firstName\")) ;\r",
									"\r",
									"\r",
									"if (requestNumberForNewCustomers > 0) {\r",
									"   pm.collectionVariables.set(\"requestNumberForNewCustomers\", --requestNumberForNewCustomers);\r",
									"   pm.execution.setNextRequest(pm.info.requestName); // Ejecuta la misma solicitud nuevamente\r",
									"    \r",
									"}  else {\r",
									"    pm.collectionVariables.set(\"requestNumberForNewCustomers\",100 ); \r",
									"}\r",
									"\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"{{firstName}}\",\n    \"lastName\": \"{{lastName}}\",\n    \"email\": \"{{email}}\",\n    \"birthDate\": \"2002-11-05\",\n    \"password\": \"{{password}}\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Customer",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [
							{
								"key": "Authorization",
								"value": "Bearer eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOiIxMjM0NTY3ODkwIiwibmFtZSI6IkpvaG4gRG9lIiwiYWRtaW4iOnRydWUsImlhdCI6MTUxNjIzOTAyMn0.KMUFsIDTnFmyG3nMiGM6H9FNFUROf3wh7SmqJp-QV30",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"firstName\": \"Lizette\",\n    \"lastName\": \"Trejo\",\n    \"email\": \"liz@gmail.com\",\n    \"password\": \"mipassword\",\n    \"birthDate\": \"2002-11-05\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers/2",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"2"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete data",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/customers/2",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"customers",
								"2"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "03-Products",
			"item": [
				{
					"name": "Productsr By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/products/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "All Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"    console.log(\"Valor de variale my_ecommerce\", pm.globals.get(\"my_ecommerce\")  );",
									"});",
									"",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"auth": {
							"type": "noauth"
						},
						"method": "GET",
						"header": [
							{
								"key": "Authorization",
								"value": "{{}}",
								"type": "text",
								"disabled": true
							}
						],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/products",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "New Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([201]);",
									"});",
									"",
									"const response = pm.response.json();",
									"",
									"",
									"pm.test(\"Response Body Structure is valid\", () => {",
									"    pm.expect(response.id).to.greaterThan(0);",
									"    pm.expect(response.name).to.eql( pm.variables.get(\"productName\") );",
									"    pm.expect(response.dscription).to.eql( pm.variables.get(\"productDescription\") );",
									"    pm.expect(response.price).to.eql( pm.variables.get(\"productPrice\") );",
									"",
									"});",
									"",
									"pm.collectionVariables.set( \"productId\", response.id );",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"let requestNumberForNewProducts = pm.collectionVariables.get(\"requestNumberForNewProducts\");\r",
									"\r",
									"\r",
									"pm.variables.set(\"productName\", pm.variables.replaceIn('{{$randomProductName}}') );\r",
									"pm.variables.set(\"productDescription\", pm.variables.replaceIn('{{$randomLoremSentence}}') );\r",
									"pm.variables.set(\"productPrice\", pm.variables.replaceIn('{{$randomPrice}}')  );\r",
									"\r",
									"if (requestNumberForNewProducts > 0) {\r",
									"   pm.collectionVariables.set(\"requestNumberForNewProducts\", --requestNumberForNewProducts);\r",
									"   pm.execution.setNextRequest(pm.info.requestName); // Ejecuta la misma solicitud nuevamente\r",
									"    \r",
									"}  else {\r",
									"    pm.collectionVariables.set(\"requestNumberForNewProducts\",100 ); \r",
									"}\r",
									"\r",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"{{productName}}}\",\n    \"description\": \"{{productDescription}}\",\n    \"price\": {{productPrice}}\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/products",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"products"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"name\": \"Laptop XP2\",\n    \"price\": 18000.5\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/products/{{productId}}",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productId}}"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/products/{{productId}}",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"products",
								"{{productId}}"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "04-Purchase",
			"item": [
				{
					"name": "Purchaser By ID",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "All Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "New Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": {\n        \"id\": 1\n    },\n    \"purchaseDate\": \"2024-12-08T11:13:14\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"customer\": {\n        \"id\": 1\n    },\n    \"purchaseDate\": \"2024-12-08T11:11:14\"\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases",
								"1"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases/4",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases",
								"4"
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		},
		{
			"name": "05-Purchases Has Products",
			"item": [
				{
					"name": "Purchase Has Product By Purchase",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases-has-products/purchase/1",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases-has-products",
								"purchase",
								"1"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "All Purchases Has Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {",
									"    pm.response.to.have.status(200);",
									"});"
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases-has-products",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases-has-products"
							]
						},
						"description": "This is a GET request and it is used to \"get\" data from an endpoint. There is no request body for a GET request, but you can use query parameters to help specify the resource you want data on (e.g., in this request, we have `id=1`).\n\nA successful GET response will have a `200 OK` status, and should include some kind of response body - for example, HTML web content or JSON data."
					},
					"response": []
				},
				{
					"name": "New Purchase has Products",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"purchase\": {\n        \"id\": 5\n    },\n    \"product\": {\n        \"id\": 7\n    },\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases-has-products",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases-has-products"
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Update Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful POST request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "PUT",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\n    \"quantity\": 3\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases-has-products/query?purchaseId=1&productId=5 ",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases-has-products",
								"query"
							],
							"query": [
								{
									"key": "purchaseId",
									"value": "1"
								},
								{
									"key": "productId",
									"value": "5 "
								}
							]
						},
						"description": "This is a POST request, submitting data to an API via the request body. This request submits JSON data, and the data is reflected in the response.\n\nA successful POST request typically returns a `200 OK` or `201 Created` response code."
					},
					"response": []
				},
				{
					"name": "Delete Purchase Has Product",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Successful DELETE request\", function () {",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 202, 204]);",
									"});",
									""
								],
								"type": "text/javascript",
								"packages": {}
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{my_ecommerce}}/api/v1/purchases-has-products/query?purchaseId=1&productId=5 ",
							"host": [
								"{{my_ecommerce}}"
							],
							"path": [
								"api",
								"v1",
								"purchases-has-products",
								"query"
							],
							"query": [
								{
									"key": "purchaseId",
									"value": "1"
								},
								{
									"key": "productId",
									"value": "5 "
								}
							]
						},
						"description": "This is a DELETE request, and it is used to delete data that was previously created via a POST request. You typically identify the entity being updated by including an identifier in the URL (eg. `id=1`).\n\nA successful DELETE request typically returns a `200 OK`, `202 Accepted`, or `204 No Content` response code."
					},
					"response": []
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "createdCustomerId",
			"value": "1"
		},
		{
			"key": "roleAdmin",
			"value": "{ \"name\": \"ADMIN\",\n \"description\": \"Encargado de gestionar toda la plataforma\"\n}"
		},
		{
			"key": "roleCustomerId",
			"value": "2",
			"type": "string"
		},
		{
			"key": "roleAdminId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "requestNumberForNewCustomers",
			"value": "100",
			"type": "string"
		},
		{
			"key": "requestNumberForNewProducts",
			"value": "100",
			"type": "string"
		},
		{
			"key": "customerId",
			"value": "1"
		},
		{
			"key": "productId",
			"value": "1",
			"type": "string"
		},
		{
			"key": "roleWareHouseManagerId",
			"value": ""
		}
	]
}